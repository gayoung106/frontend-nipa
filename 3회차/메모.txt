
함수형 컴포넌트에 기능을 추가해서 쓰는 함수: 리액트 훅
* useEffect

리액트 컴포넌트의 생명주기에 따라 동작을 제어할 수 있는 기능을 제공
콜백함수를 익력받아 특정 생명주기마다 이를 호출
두번째 인수로 의존성 배열을 전달받아 콜백함수의 호출타임을 결정하기도 함

useEffect(콜백함수, 의존성배열)

리액트는 spa로 문서는 하나, 계속 dom이 생겼다가 없어지게 하는 방식

생명주기
태어날때부터 죽을때까지

그걸 관리해주는 게 useEffect

콜백함수는 어떻게 됐으면 좋겠다는 정의
의존성 배열은 누가? 누가 어떻게 됐으면 좋겠는데?

useEffect(() => {

},[])

의존성 배열에 상태명을 입력하면 특정 상태가 변경될 때마다 콜백함수가 동작하도록 설정가능
그러니깐 의존성 배열이 변경될 때 마다 콜백함수가 실행되라!


/*
 리액트 컴포넌트: 리액트 앱에서 표시해주는 웹 컨텐츠, (웹요소)
 만들때 사용하는 방식 : JSX(리액트 앱에서 콘텐츠를 표현하는 문법)
 함수형 컴포넌트: 자바스크립트 함수가 마크업 컨텐츠를 반환하는 형태
 */

/*
 useState
 리액트 컴포넌트의 상태가 변경될 때 리-렌더링 된다
 */

// 2개의 상태관리

//useEffect: 생명주기마다의 동작을 관리하는 함수

//  //생기는 순간부터가 변화의 시작 그래서 화면뜨자마다 실행
//어? 근데, 왜. 2번씩 콘솔에 찍히죠??
// index.js 때문임 App컴포넌트를 감싸로 있는 스트릭모드도 실행되기 때문

의문, 예제에서 의존성 배열 없이 왜 시간이 업데이트 될까?

네, 맞습니다. 제시해주신 코드에서 useEffect 훅의 의존성 배열이 비어 있으므로, setInterval을 포함한 콜백 함수는 컴포넌트가 처음 마운트될 때만 실행됩니다. 이는 컴포넌트 생성 초기에 한 번만 setInterval 함수가 실행되며, 매초마다 시간을 표시하게 됩니다.

여기서 특정 상태나 프롭스를 의존성 배열에 포함시키지 않고 setInterval 함수를 한 번만 실행하려는 상황에서는 빈 의존성 배열을 사용하는 것이 적절합니다. 이는 원하는 동작을 달성하는 데 필요한 접근 방식입니다. 시간을 매 초마다 업데이트하면서 특정 상태나 프롭스에 의존하지 않을 수 있습니다.

제시한 코드는 이 목적을 달성하는 데 올바르며, 의존성 배열에 특정 상태(예: time이나 date)를 포함시킬 필요가 없습니다. 간격은 백그라운드에서 계속 실행되어 date와 time 상태를 업데이트하고 변경 사항을 반영하는 컴포넌트를 다시 렌더링하게 됩니다.

이 방식으로 빈 의존성 배열을 사용하는 것은 보통 컴포넌트가 마운트될 때 한 번만 특정 효과를 수행하려는 경우에 적합합니다.



* useRef
특벙 컴포넌트에 접근할 수 있도록 참조 객체를 반환하는 함수
참조 객체가 지닌 current속성을 이용하면 참조 중인 요소에 접근가능

const container = useRef()
return <h1 ref={container}>텍스트요소</h1>

특정 태그 하나에 대해서만 작업을 하길 원함
h1태그에 대해서만 접근하고 싶어

참조객체? 어떤 대상을 가리킬 수 있는 객체, 손가락 같은 역할

div {

  /* 키프레임과 듀레이션 지정 무한*/
  animation: pikachu 3s infinite;
}

애니메이션
@keyframes pikachu {
  //프레임을 3개로 나눔
  20%{ background: orange}
  50%{background: red}
  100%{background: green}
}

@keyframes pikachu {
  //2개일때만
 
  to{
     background: red;
     width: 100px;
     height: 100px;
     }
  from{background: green}
}

styled-components
사용하기 쉽고 작업을 효율적으로 진행하기에 좋음
기본적으로 설치되어 있는 패키지가 아님
명령어를 입력해서 설치해야 함
npm install styled-components
오타주의!

styled 함수를 이용해 기본 태그를 선택하고, 거기에 css코드를 css문법ㅇ ㅔ맞게 작성하여 전달하는 방식
css 코드를 전달하는 방식을 가리켜 = 태그드 템플릿 리터럴 이라고 함 => 함수에 인수를 전달하는 또다른 방식

const BoxNormal = styled.div `
width: 100px;
height: 100px;
background: ${props => props.value}
`;

태그드 템플릿은
인수를 전달하는 방법이기 때문에
내부적으로 인수를 적용해 가변성을 더할 수 있음

css-in-JS ? 기본 객체리터럴 방식


리액트 배포
1. 노드 기반으로 동작
2. 노드 서버에서 제공

정적 파일로써 배포를 하면? 빌드절차가 필요 !
npm run build

네틀리파이에서 배포함
https://animation-eyes.netlify.app/

리액트 쿼리
반응형 웹
 기기 환경에 따라 변화하는(반응하는) 웹앱

 화면 크기에 따라 반응함

 미디어 쿼리는 미디어 타입을 인식하고, 콘텐트를 읽어들이는 기기나 브라우저의 물리적 속성을 감지할 수 있는 유용한 모듈임
 모든 미디어 쿼리는 다음 두 가지 구성 요소를 지님
 - 미디어 타입
 - 조건에 대한 물음(쿼리)


로컬스토리지

window.localStorage
웹브라우저에는 로컬스토리지라는 속성이 있음

현재 도메인의 로컬 저장소에 접근할 수 있게 해줌
로컬 저장소는 웹브라우저에서 각 도메인에 대해 할당해주는 저장 공간으로 여기에는 데이터를 영구적으로 보관할ㄹ 수 있다.
데이터 보관시에는 데이터의 이름과 데이터의 실제 값(키와 밸류)을 각각 지정하며, 이때 데이터 타입은 문자열 형태만 허용

영구적? 브라우저를 껐다가 켜거나 페이지를 새로고침해도 해당 페이지에 남아있게 하는것.

우리는 내일 투두리스트를 만들게 될 듯...


