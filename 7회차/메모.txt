리덕스 적용해보기

리덕스는 자바스크립트 애플리케이션을 위한 상태 관리 라이브러리
Context API또는 useReducer를함수에 앞서 존재했던 상태 관리 라이브러리
애플리케이션의 상태를 통합, 관리할 수 있는 편리한 기능을 제공

Context API 또는 useReducer를 이용해 상태 관리를 할 수 있지만, 규모가 큰 프로젝트에서 여러 종류의 상태를 하나의 객체로써 관리할 때에는 리덕스를 사용하는 것이 좀 더 유리하다고 평가받고 있음

- 특정 컴포넌트에서 상태를 관리하게 되면 구조적으로 불편해짐

리액트용 리덕스를 사용해야 함
리덕스는 리액트 애플리케이션을 위해서 탄생한 라이브러리가 아님
따라서 리액트 전용 리덕스 패키지 react-redux를 사용해야 함

npm install redux react-redux 로 설치해야 함

순환구조라 시작점이 딱히 정해져 있지 않지만
그래도

컴포넌트에서 시작한다 생각
할 일 목록에서 할일을 추가 하겠다
추가: 액션 ! 발현
액션 객체가 만들어짐
요청: 처리해줘 리듀서 호출
리듀서는 요구하는 로직(절차)를 처리
상태가 통합관리 중인
store에서 업데이트

스토리지에서 상태가 바뀌면 리액트 애플리케이션은 다시 렌더링되고, 다시 컴포넌트로 돌아가면서 돌고 있음

각구성요소의 역할
액션: 사용자가 수행하는 작업 유형을 지정하는 자바스크립트 객체
리듀서: 리액트 앱의 변경 사항을 결정하고 업데이트 상태를 반환하는 함수
스토어: 전체 상태 트리를 관리하는 저장소

컨텍스트 API와 useReducer를 합쳐놓은 듯


useSelector는 Redux 스토어에서 상태에 액세스하는 데 사용되는 반면 useDispatch는 작업을 발송하여 Redux 스토어와 상호 작용하는 데 사용

1. props 쓰기귀찮을때,
2. 상태관리하려고 할때 state
만약에 부모컴포넌트에 있는 상태를 자식이 가져다쓰려고 하면
props를 통해서 속성을 전달할 수 있음
그럼 많은 컴포넌트가 중첩해 있다면?
props
props
props
이런식으로 계속 전달해야함
이게 귀찮기때문
store.js에 state저장
그리고 사용하고자하는 컴포넌트에서 가져다 쓰면됨

2. 상태관리가 용이함
state관리가 용이함
미리 수정방법을 다 넣어둠 

사용하고자 하는 컴포넌트는 수정 요청을 함

-버그가 일어났을때 추적이 쉬움 수정하기 용이함

dispatch씀


리덕스 사용이 권장되는 서비스?

- 대부분의 컴포넌트(또는 페이지)에서 공통적으로 사용하는 상태가 있을 때!
=> 로그인 정보: 로그인 여부, 닉네임, 계정 정보
=> 테마
=> 작성 중이던 입력 데이터



# 페이지 라우팅

페이지주소에 따라 해당페이지로 이동하면 페이지 화면이 로드됨 html이 뿌려짐
페이지 전환 순간에 번쩍 ! 하는 그런게 있음
spa는 렌더링만 됨
따라서 속도가 훨씬 빠름
여러개의 주소가 할당되지 않음

리액트 라우터
npm install react-router-dom
Router 리액트 라우터 기능을 사용하는 컴포넌트를 감싸는 래퍼 컴포넌트
Route 컴포넌트 별 주소를 지정하는 래퍼 컴포넌트
Routes Route 컴포넌트의 래퍼 컴포넌트
Link 페이지가 새롭게 로드되는 현상없이 주소를 이동할 수 있는 컴포넌트

useParams?
Params 파라미터 매개변수
주소 뒤에 있는 개별적 키워드